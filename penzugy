class Fuggvenyek:

    def __init__(self,a):
        self.alap=a


    def pow(self,k):
        return self.alap**k

class A:

    def __init__(self, dollar):
        self.dollar=dollar

    def getPresentValue(self):
        return self.dollar

    def __str__(self):
        return ("A) Azonnal kap {}$-t, aminek a jelenertek(PV)={}$\n".format(self.dollar, self.dollar))


class B:

    def __init__(self, dollar, ev, r):
        self.dollar=dollar
        self.ev=ev
        self.nevezo=Fuggvenyek(r+1)

    def getPresentValue(self):
        self.pv=round(self.dollar/(self.nevezo.pow(self.ev)),2)
        return self.pv

    def __str__(self):
        return ("B) {} ev mulva 180.000$-t aminek a jelenerteke: {}$\n".format(self.ev, self.getPresentValue()))

class C:

    def __init__(self, dollar,r):
        self.dollar=dollar
        self.hozam=r

    def getPresentValue(self):
        return self.dollar/self.hozam

    def __str__(self):
        return ("C) Evi {}$-os orokjaredek, aminek jelenerteke(PV)={}\n".format(self.dollar, self.getPresentValue()))

class D:

    def __init__(self, dollar, ev, r):
        self.dollar=dollar
        self.ev=ev
        self.hozam=r


    def getPresentValue(self):
        return round(self.dollar*((1/self.hozam)-(1/(self.hozam*(self.hozam+1)**self.ev))))

    def __str__(self):
        return ("D) Evi {}$ {} even keresztul, aminek a jelenterteke(PV)={}$\n".format(self.dollar, self.ev, self.getPresentValue()))

class theBest(A,B,C,D):

    def __init__(self):
        A.__init__(self,100000)
        self.pvA = A.getPresentValue(self)
        self.nameA = 'A)'
        
        B.__init__(self, 180000, 5, 0.12)
        self.pvB= B.getPresentValue(self)
        self.nameB='B)'

        C.__init__(self, 11400, 0.12)
        self.pvC = C.getPresentValue(self)
        self.nameC='C)'
        
        D.__init__(self, 19000, 10, 0.12)
        self.pvD = D.getPresentValue(self)
        self.nameD="D)"


    def getAllPV(self):
        a=[self.pvA, self.pvB, self.pvC, self.pvD]
        names=[self.nameA, self.nameB, self.nameC, self.nameD]
        max=[self.pvA]
        mnames=[self.nameA]
        for i in range(len(a)):
            if a[i]>max[0]:
                max[0]=a[i]
                mnames[0]=names[i]

        return ("A legmagasabb jelenerteke a {} befektetesnek van: {}".format(mnames[0], max[0]))





def main():
    a=A(100000)
    print(a)
    b=B(180000, 5, 0.12)
    print(b)
    c=C(11400, 0.12)
    print(c)
    d=D(19000, 10, 0.12)
    print(d)
    
    kt=theBest()
    print(kt.getAllPV())

main()
